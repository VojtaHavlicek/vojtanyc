<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reinforcement Learning on Sidequests</title>
    <link>http://localhost:1313/vojtanyc/tags/reinforcement-learning/</link>
    <description>Recent content in Reinforcement Learning on Sidequests</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/vojtanyc/tags/reinforcement-learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>From Minimax to Monte Carlo Tree Search: Smarter AI for Mars Colony</title>
      <link>http://localhost:1313/vojtanyc/posts/from-minimax-to-mcts/</link>
      <pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/vojtanyc/posts/from-minimax-to-mcts/</guid>
      <description>&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve been working on the AI for my game, which takes place on a toroidal grid with dynamic systems like population growth, energy networks, and resource management. It’s a complex environment with a lot of long-term planning involved — and that makes writing a good AI surprisingly tricky.&lt;/p&gt;&#xA;&lt;p&gt;Up until now, I’ve been using a classic &lt;strong&gt;minimax&lt;/strong&gt; algorithm with a &lt;strong&gt;handcrafted evaluation function&lt;/strong&gt;. Here&amp;rsquo;s the setup:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A minimax tree search (depth-limited)&lt;/li&gt;&#xA;&lt;li&gt;A fixed &lt;code&gt;evaluate()&lt;/code&gt; function that tries to guess how &amp;ldquo;good&amp;rdquo; a state is, based on:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Population size&lt;/li&gt;&#xA;&lt;li&gt;Energy yield&lt;/li&gt;&#xA;&lt;li&gt;Proximity to resources&lt;/li&gt;&#xA;&lt;li&gt;Habitat count&lt;/li&gt;&#xA;&lt;li&gt;Loops in pipe networks (bad!)&lt;/li&gt;&#xA;&lt;li&gt;And more&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;While this approach works &lt;em&gt;okay&lt;/em&gt; in simple cases, it really struggles in the kinds of situations my game cares most about — especially when &lt;strong&gt;timing and sequence of actions&lt;/strong&gt; matter more than just static advantage.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
