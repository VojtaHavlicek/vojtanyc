<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Game Development on Sidequests</title>
    <link>http://localhost:1313/vojtanyc/tags/game-development/</link>
    <description>Recent content in Game Development on Sidequests</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/vojtanyc/tags/game-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>From Minimax to Monte Carlo Tree Search: Smarter AI for Mars Colony</title>
      <link>http://localhost:1313/vojtanyc/posts/from-minimax-to-mcts/</link>
      <pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/vojtanyc/posts/from-minimax-to-mcts/</guid>
      <description>&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve been working on the AI for my game, which takes place on a toroidal grid with dynamic systems like population growth, energy networks, and resource management. It‚Äôs a complex environment with a lot of long-term planning involved ‚Äî and that makes writing a good AI surprisingly tricky.&lt;/p&gt;&#xA;&lt;p&gt;Up until now, I‚Äôve been using a classic &lt;strong&gt;minimax&lt;/strong&gt; algorithm with a &lt;strong&gt;handcrafted evaluation function&lt;/strong&gt;. Here&amp;rsquo;s the setup:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A minimax tree search (depth-limited)&lt;/li&gt;&#xA;&lt;li&gt;A fixed &lt;code&gt;evaluate()&lt;/code&gt; function that tries to guess how &amp;ldquo;good&amp;rdquo; a state is, based on:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Population size&lt;/li&gt;&#xA;&lt;li&gt;Energy yield&lt;/li&gt;&#xA;&lt;li&gt;Proximity to resources&lt;/li&gt;&#xA;&lt;li&gt;Habitat count&lt;/li&gt;&#xA;&lt;li&gt;Loops in pipe networks (bad!)&lt;/li&gt;&#xA;&lt;li&gt;And more&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;While this approach works &lt;em&gt;okay&lt;/em&gt; in simple cases, it really struggles in the kinds of situations my game cares most about ‚Äî especially when &lt;strong&gt;timing and sequence of actions&lt;/strong&gt; matter more than just static advantage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Finding Loops on Torus</title>
      <link>http://localhost:1313/vojtanyc/posts/finding-loops/</link>
      <pubDate>Sun, 23 Mar 2025 12:04:56 -0400</pubDate>
      <guid>http://localhost:1313/vojtanyc/posts/finding-loops/</guid>
      <description>&lt;h2 id=&#34;-problem-statement&#34;&gt;üß© Problem Statement&lt;/h2&gt;&#xA;&lt;p&gt;In my current game project, I&amp;rsquo;m working with a toroidal 2D grid (a grid that wraps around like a donut). On this grid, certain tiles are marked as ‚Äúpaths.‚Äù These paths can form closed loops, and I wanted a way to &lt;strong&gt;detect and count the number of such loops&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;There‚Äôs a twist:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The grid &lt;strong&gt;wraps around both horizontally and vertically&lt;/strong&gt; (like Pac-Man).&lt;/li&gt;&#xA;&lt;li&gt;I only get the path data as a &lt;strong&gt;list of coordinates&lt;/strong&gt;, not a full 2D array.&lt;/li&gt;&#xA;&lt;li&gt;And there may be &lt;strong&gt;multiple disconnected path components&lt;/strong&gt; on the grid.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;-strategy&#34;&gt;üß† Strategy&lt;/h2&gt;&#xA;&lt;p&gt;Instead of trying to trace every possible loop (which is hard and inefficient), I used a classic trick from graph theory:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
